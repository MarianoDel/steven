* ROADMAP DEL PROYECTO

* PRIMERA ETAPA
** Activar Raspberry Pi3
*** DONE Cargar sistema operativo en micro SD
    CLOSED: [2017-08-15 Tue 16:39]
    - instalacion sistema basico y configuracion de red
      (no funciono la SD!!!) 
      14-08-17
   
    - nueva instalacion de 0 en otra SD (clase 4)   
      15-08-17

    - carga de paquetes de soft                     
      15-08-17

*** Slackware RP3
**** Links para Slackware en RP3
     https://docs.slackware.com/howtos:hardware:arm:raspberrypi3

     http://rpi.fatdog.eu/index.php?p=sysconfig

**** Installing Slackware on RP3
     http://rpi.fatdog.eu/index.php?p=installer

     $ fdisk -l

     Disk /dev/sdb: 15.1 GiB, 16191062016 bytes, 31623168 sectors
     Units: sectors of 1 * 512 = 512 bytes
     Sector size (logical/physical): 512 bytes / 512 bytes
     I/O size (minimum/optimal): 512 bytes / 512 bytes
     Disklabel type: dos
     Disk identifier: 0xf7ee0e18

     Device     Boot Start      End  Sectors  Size Id Type
     /dev/sdb1  *      184 31623167 31622984 15.1G  c W95 FAT32 (LBA)
     
     /dev/sdb1	es la microSD
     
     $ xz -dc sarpi3-installer_slackcurrent_fd0.img.xz | dd of=/dev/sdb1 bs=65536
     o
     $ xz -dc sarpi3-installer_slackcurrent_fd0.img.xz | dd of=/dev/sdb1 bs=32768
     
     
     #para dar formato
     mkdosfs -I -F32 device_name		// ex. /dev/sdb1

###ARMO TODO CON FDISK
Command (m for help): p
Disk /dev/sdb: 14.4 GiB, 15489564672 bytes, 30253056 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xcd169534

Device     Boot Start      End  Sectors  Size Id Type
/dev/sdb1        2048    67583    65536   32M  b W95 FAT32
/dev/sdb2       67584 30253055 30185472 14.4G 83 Linux

$ mkfs.vfat /dev/sdb1
$ mkfs.ext4 /dev/sdb2		//tarda un poco

#en el directorio
$ git clone https://github.com/raspberrypi/firmware.git

#### lo anterior lo corte porque era muy largo, arme la imagen desde windows y funciono
http://rpi.fatdog.eu/index.php?p=sdconfig#sd_windows

baje la imagen y utilice 7zip, porque el de winzip no funcionaba, grabe en la memoria el .img
archivo:
http://rpi.fatdog.eu/index.php?p=downloads
current, hard float
tira error out of memory, voy a cambiar swap a 1G

########################################################################
########vamos de nuevo con otra memoria 15-08-17
desde windows con win32diskimager cargo slackware current hard

#arranca ok
seteo fecha y conexion de red

#ping ok
seteo nuevas particiones al mmcblk0

#print ok

#para lograr correr X Window
en /etc/X11 borre todos los archivos xorg.conf que habia
(desde 0 no deberia haber ninguno)

como root
cd /boot/config.txt
cambiar gpu-mem=256
startx

cambie a gpu-mem=512
porque el screensaver me bloquea y a veces no arranca el X

#### mejore a fuente 5V 0.7A por una de 5V 2A y ahora parece arrancar siempre X

#### FINALMENTE ERA UN PROBLEMA DE FUENTE 5V 0.7A LA CAMBIE POR 5V 2A

#### INSTALO ADEMAS ALGO DE PYTHON DIRECTO DESDE SLACKBUILD.ORG ####
instalo pip  (por ahi no necesitaba este pero bueno)
instalo python3

#esto me instala tambien pip3

#instalo el PyQt5
pip3 install python-qt5

**** Slack Packages
### The Slackware packages can be found with any of the following extensions:

       tgz - Slackware package archive compressed using gzip     (prefered)

       tbz - Slackware package archive compressed using bzip2

       tlz - Slackware package archive compressed using lzma

       txz - Slackware package archive compressed using xz      (prefered)




## Official Tools
Included in the base installation of Slackware are two packages pkgtools and slackpkg. pkgtools contains a set of application that are o be used for basic package management. slackpkg is a package manager and update tool for you to use with the official Slackware servers.

"pkgtools" contains the following executable applications, refer to the man pages on your system for more detailed information including options and syntax.

installpkg - This application is used to install a new package
removepkg -This application is used to remove a package from your system
upgradepkg - upgradepkg upgrades a Slackware package from an older version to a newer one. It does this by INSTALLING the new package onto the system, and then REMOVING any files from the old package that aren't in the new package (taken from the man pages)
explodepkg - This tool uncompresses and untar a Slackware package into your current directory.
pkgtool - pkgtool is a menu-driven package maintenance tool provided with the Slackware Linux distribution. It allows the user to install, remove, or view software packages through an interactive system. Pkgtool can also be used to re-run the menu-driven scripts normally executed at the end of a Slackware installation. This is useful for doing basic reconfiguration (like changing the mouse type). (taken from the man pages)
makepkg - This application is used to create a new Slackware package from the contents of your current directory.

"slackpkg" is to be used to installed official slackware packages from the official Slackware servers and to manage updates and upgrades, this tools is very useful for keeping a system up-to-date and for doing a distribution version upgrade without having to do a reinstall or having to download and burn a disk.

## Unofficial Tools

swaret - This tool is designed to replicate the functionality of the Debian apt-get system, you identify the repositories you would like to use and it allows you to download and install packages from the specified location, this tool also attempts dependency resolution.

slapt-get - This tool is designed to replicate the functionality of the Debian apt-get system, you identify the repositories you would like to use and it allows you to download and install packages from the specified location.

sbopkg - This tool syncs with the slackbuilds.org build script repository, it is used to pull build scripts, upon choosing the scripts to build it allows you to choose the build order and also customize the scripts. Upon completion of the scripts it will allow you to build a Slackware package or to build and install the package. If you choose to use a third party tool, this is the one I recommend; it has the highest probability or package stability and allows you to customize your packages.

## Unofficial Sites/Repositories

slackbuilds.org - This site holds community submitted builds scripts to easily build Slackware packages from the source code of various applications.
linuxpackages.net - This is a repository of pre-built packages.
slackware.it - This is a repository of pre-built packages.
alienBOB's repo - First of alienBOB is able to do things that others can not, so I trust his work immensely. His site contains pre-built packages and the associates build scripts use d to build them, so you can use it to download packages or to get stable build scripts and build the packages to fit your needs.

# Install from a Pre-built Package
 To install Slackware from a pre-built package you can use installpkg, upgradepkg, swaret or slapt get. This is very simple, in swaret or slapt-get you only need to choose the package and select to install it. To install a package using the official tools you only need to call the program and use the package name as the argument, (example.. installpkg wine-2.5.6-x86.tgz).
 
# Compile the App from the Source Code
 I know that many people have grown accustomed to this method over time, but it is not preferred in Slackware, instead to document your actions and avoid replication of efforts it is advisable to build a slackbuild script, believe me this will save you some time and effort in the future.

# Build a Custom Package from a Build/slackbuild Script
 This is the true magic in Slackware, every official package that you receive has a slackbuild file, in the source directory on the Slackware disk you will find the slackbuild files and source code for every package. This availability in the source directory allows you to view all options/modifications that were done to a package and if you need you can modify the script and arguments to fit your needs. Once the script has been run and the package has been built you then have a redistributable package for the specified application that fits your needs.

 The slackbuild.org script repository houses user submitted scripts for building stable applications for Slackware that have been tested on various architectures by extremely knowledgeable members of the Slackware community. Included in the slackbuild archive are the build script, license information, .desktop files (if needed), icons, and a .info file that tell you the version, source download location, md5sum, supported architectures and the author of the script. There is also a mailing list and an irc channel available if you have questions or experience problems.

## Example for slackbuild.org
 Now for an example of how to build a package from a slackbuild, I will use audacity as an example.

 Find the app on slackbulds.org, for audacity the page is http://slackbuilds.org/repository/13.0/audio/audacity/

 Read the description to see what options are available and what dependencies are needed.

 Download the slackbuild file/archive to your computer.
 
 Extract the archive using tar or your preferred archive management tool, to extract the archive using tar you would type ‚Äútar xvf audacity.tar.gz, this will extract the contents to a directory within your current directory named audacity.
 
 Go into the newly created directory.

 Download the source download that is listed on the slackbuilds.org website, a clean method is to use wget, for example you can type http://downloads.sourceforge.net/sourceforge/audacity/audacity-minsrc-1.3.7.tar.bz2, the other option is to make it continuous so that if you loose a connection you can restart from the last point in the download.

 Verify the md5sum of the downloaded source archive, to do it with this archive you would run md5sum audacity-minsrc-1.3.7.tar.bz2, if the checksum does not match the one on the website then your download was corrupt and needs to be downloaded again.
 
 Open the .Slackbuild file with a text editor.

 Modify the arch line (ARCH=${ARCH:-i486}) to reflect your systems architecture, this can be pulled by running uname ‚Äìa in the terminal.

 If you need you can go to the configure section to add or remove compile time options.

 Save and close the document.

As root run the slackbuild file, in this case you would run ‚ audacity.SlackBuild.
When the build and package process it complete the location of the resulting package
 will be announced, you will only need to install the package after this.
Slackbuilds.org has a howto page that can help you also 
http://slackbuilds.org/howto/
http://slackbuilds.org/howto/
Also if you can build a program from source then it is advisable to make a build
 script using the examples from slackbuilds.org around the compile operations, 
this will allow you to add documentation and save your build actions for future use.
Package Tracking
When using Slackware you have the ability to track the installation date, 
installed files, and package description of all packages that are installed on 
your system, This tracking is done within the /var/log/packages directory, this 
directory contains a single text file for each installed application, the file 
contains the package description and list of installed files/directories from 
the current package. You can easily view the list of files within the 
/var/log/packages directory and sort by name, creation date or whatever 
additional criteria you use.
For some examples of the usability of the /var/log/packages directory I will 
show you the following. If you are looking to see what package installed a 
specific file to your computer, let say the file is /sbin/iptables, you can run 
the commands
cd /var/log/packages
grep /sbin/iptables *  this will display all files within the current directory 
that contain the exact phrase that was called by grep. 
If you want to review the installed files for a package to find all files that 
were installed in the /bin directory, let say we are looking at the pkgtools 
package, you can run the command‚
cat /var/log/package/pkgtools-13.0-noarch-3.txt|grep /bin/
In a similar fashion Slackware moves the text files from /var/log/packages 
to /var/log/removed-packages when you remove a package from your system, this 
makes it easier to have adequate tracking of what you have installed and what you 
removed and when each action was taken, this will help you greatly if you are 
wanting to replicate the list of installed packages from one server to another, 
you can easily write a script to compare the output of the folders on both 
systems and output a resulting file of non-matching packages that you can later 
use in a script for automatic installation..
That is all that I can think of right now on this subject. I am sure that the 
readers will have much to add to detail additional options and functionality, 
so please add whatever you like in the comments.
I know that I did not cover any specific tool in-depth but if you would like 
an in-depth explanation, please post a request in the Linux.com forum and I 
will gladly write up more detailed responses.

** Configurar Editor de texto para el entorno de programacion
*** DONE Crear archivo .emacs de configuracion
    CLOSED: [2017-08-16 Tue 16:38]

*** DONE Activar paquetes
    CLOSED: [2017-08-16 Tue 16:38]

** Activar Git (control de versiones)
*** DONE Conseguir transferir archivos por github	
    CLOSED: [2017-08-16 Tue 16:36]

*** DONE Activar entorno o repositorio para cosas de steven  
    CLOSED: [2017-08-16 Tue 16:37]

** Activar el entorno python
*** DONE Usar easy-install
    CLOSED: [2017-08-16 Tue 16:38]

** Pruebas hardware y software para SCANNER -BARCODE READER - codigo de barras
*** DONE Utilizar script python, docs
    CLOSED: [2017-10-16 Tue 16:40]
    www.rkblog.rk.edu.pl/w/controlling-keyboard-emulyating-devices-pyusb/

    github.com/walac/pyusb/blob/master/docs/tutorial.rst

** Activar AP por wifi raspberry
** Redirigir  todas los conexiones directamente a la web
** Bibliotecas para los pines I/O de raspberry (C y Python)
*** DONE Prueba funcional Output (con osciloscopio)      
    CLOSED: [2017-08-17 Tue 16:44]

*** DONE Prueba funcional Input (con osciloscopio)
    CLOSED: [2017-08-17 Tue 16:44]

*** DONE Prueba funcional PWM (no creo que se necesite)	
    CLOSED: [2017-10-13 Tue 16:45]

   - para pines GPIO y PWM
   http://www.pieter-jan.com/node/15

   https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.c

   http://elinux.org/RPi_GPIO_Code_Samples

** Instalacion python3
*** DONE Instalo python3 para poder probar la biblioteca Qt
    CLOSED: [2018-01-16 Tue 16:41]

*** DONE Pruebas Qt
    CLOSED: [2018-01-20 Tue 16:41]

*** DONE Desde Python3 Instalo RPi.GPIO
    CLOSED: [2019-10-28 Mon 13:50]
    # pip3 install RPi.GPIO

*** DONE Desde Python3 Instalo PyUSB
    CLOSED: [2019-10-28 Mon 14:01]
    # pip3 install pyusb

*** DONE Desde Python3 Instalo PyMongo
    CLOSED: [2019-10-28 Mon 14:06]
    # pip3 install pymongo

** Para puerto serie
   - para puerto serie en general lo levanta el sistema en:
   /dev/ttAMA0 o /dev/ttyS0
   - con pyserial
   s = serial.Serial('/dev/ttyACM0', 115200)  

** AP WiFi
## usar Linux como AP

###haciendolo solo con iwconfig
#http://oob.freeshell.org/nzwireless/hostap.html

###con hostapd (interesante como prueba driver para ver capacidad)
#https://prahladyeri.wordpress.com/2013/05/26/how-to-turn-your-linux-machine-into-a-wifi-access-point/
(i) Find your kernel driver module in use by issuing the below command:
lspci -k | grep -A 3 -i “network”

(ii) Now, use the below command to find out your wifi capabilities (replace ath9k by your kernel driver):
modinfo ath9k | grep ‘depend’
(iii) If the above output includes “mac80211” then it means your wifi card will support the AP mode.

###sin hostapd
#http://www.enterprisenetworkingplanet.com/netsysm/article.php/3467111/Build-A-LinuxBased-Wireless-Access-Point-Part-2.htm

The SSID (service set identifier) of the example access point is Northpasture, because that is the view out my window. SSIDs can be up to 32 characters and are case-sensitive.

Debian Configuration
Debian provides several ways to configure wireless adapters. The simplest is to use /etc/network/interfaces. Add this entry, using your own network addresses and ESSID:

auto eth1
iface eth1 inet static
address 192.168.1.5
network 192.168.1.0
netmask 255.255.255.0
broadcast 192.168.1.255
gateway 192.168.1.1
wireless_essid Northpasture
wireless_mode Master

You can put any iwconfig command in this file, in the format wireless_[command] [value], except nick.

###con hostapd	(interesante paso a paso)
#http://xmodulo.com/raspberry-pi-wifi-access-point.html

** Redirection - Links
   ## redirigir conexiones a webpage en localhost
   
   #con iptabes
   https://unix.stackexchange.com/questions/203791/how-to-redirect-all-http-request-to-a-local-web-server
   
   #con dnsmasq
   https://askubuntu.com/questions/53523/how-to-redirect-a-url-to-a-custom-ip-address
   
   #con /etc/hosts
   https://stackoverflow.com/questions/25592864/redirect-outgoing-connection-to-localhost

** Mongo DB y Bottle
   #youtube
   mongodb y bottle
   
   #instala mongodb; usa el comando mongo (poquito) desde el shell; se conecta con pymongo para python; bottle
   % mongo 2.33
   % pymongo 7.00
   % mongo 12.00
   https://www.youtube.com/watch?v=ClAQEARNUoQ
   
   https://www.youtube.com/watch?v=e6UVjONLHgM&t=2s
   
   #curso completo bottle muy lento
   https://www.youtube.com/watch?v=N0Pd83eDt7s
   
   #para pagina web con estilo
   https://www.youtube.com/watch?v=jV8B24rSN5o
   
   #manual mongo
   http://api.mongodb.com/python/current/tutorial.html
   
   /opt/mongo/bin/mongod --journal


* SEGUNDA ETAPA
** Desarroll mini-pagina web
   - Elegir Flask o Bottle
   - Apuntar con link por ahora
*** DONE Instalo Flask para pruebas en Web
    CLOSED: [2019-10-26 Tue 16:42]

** Desarrollo base de datos MongoDB
   - forma de conexion que utilizo
     https://www.w3schools.com/python/python_mongodb_sort.asp

*** DONE Cargar MongoDB en arranque automatico rc.local
    CLOSED: [2019-10-29 Tue 17:06]
    - comando de inicio
    /opt/mongo/bin/mongod --journal

*** TODO Conexion a la base
    - abrir base desde programa python, y apuntar al puerto 27017

*** DONE Consola web de logging
    CLOSED: [2019-10-29 Tue 17:09]
    - con el explorador apuntar al puerto 28017
      192.168.1.104:28017

*** Debo bajar la version de Pymongo por problemas de compatibilidad
    pip3 install pymongo==3.4.0

** DONE Paso los scripts a arranque automatico
   CLOSED: [2019-11-07 Thu 10:37]

*** pongo los llamados en rc.local
    - uso el & para que corra sin consola
    /usr/bin/python3 /home/med/Documents/steven/high_level_2.py &

    - paso mongod a daemon los logs en /var/log/mongodb.log
    /opt/mongo/bin/mongod --journal --fork --logpath /var/log/mongodb.log

* DOCUMENTACION GENERAL DEL PROYECTO


* FUNCIONAMIENTO DEL SOFTWARE / FIRMWARE
  Se compone de 3 programas principales corriendo continuamente y programas auxiliares corriendo a demanda
  Los 3 programas principales son: programa de lector, base de datos, server y pagina web

** Programa de lector
   Se encarga de la interface con el lector y le envia la informacion a la base de datos de lo leido
   Se encarga de abrir y cerrar la tapa (junto con software adicional especifico)
  
** Base de datos
   Se encarga de guardar toda la informacion y hace de interface entre los 3 programas
   Se encarga de formular los reportes encargados desde la pagina web
  
** Server Web
   Se encarga de mostrar a los usuarios el estado de funcionamiento del sistema
   Se encarga de mostrar los reportes requeridos por el usuario
   Se encarga de adicionar y editar items segun el codigo de barras

* HARDWARE ADICIONAL REQUERIDO
  Se necesita mas desarrollo de hardware por los siguientes motivos
  - hay que controlar la apertura y el cierre de la tapa desde la placa principal (raspberry)
  - tendrían que disponerse 2 o 3 leds para mostrar apertura / cierre y estados de error de los mecanismos
  - se necesita agregar un reloj de tiempo real ya que la placa no dispone de uno y no se puede asegurar
    que se conecte a internet para conseguir el horario actualizado
  - barrera optica para detectar el real deposito de los elementos???
  - sensor ultrasonico para revisar el llenado del tacho??????



* POSIBILIDADES FUTURAS DEL PROYECTO (no para Proyecto Final)
** Con este esquema de funcinamiento surgen algunas posibilidades futuras
   - Si el equipo se coloca en un hogar, podría por ejemplo reportar informacion de interes para la salud:
   1. cantidad de calorias consumidas
   2. cantidad de sodio consumido
   3. etc

   - Si el equipo se coloca en la calle podria realizar las siguientes tareas
   1. reconocer el producto y abrir tapa de elemento reciclable o tapa de desecho convencional
   2. se puede agregar un nuevo contenedor para plasticos aluminios, etc
   3. se puede conocer informacion comercial de productos util para empresas
   4. cantidad de producto o insercion del mismo segun la zona / barrio / ciudad
   5. tipo de consumo de la zona (informacion para competir u ofertar mejor)

* Documentacion de uso diario
*** Armar en todas las maquinas git_use.txt
    16-08-17

*** emacs_use.txt
    16-08-17

* Documentacion especifica BARCODE READER
  - para barcode reader
  http://www.rkblog.rk.edu.pl/w/p/controlling-keyboard-emulating-devices-pyusb/

  https://github.com/walac/pyusb/blob/master/docs/tutorial.rst

** Para Pruebas
   # lsusb
   Bus 001 Device 008: ID 05fe:1010 Chic Technology Corp. Optical Wireless


* ARRANQUE AUTOMATICO en rc.local
** ultimas lineas de rc.local
   # Set the system clock/time from hardware clock
   hwclock -s

   # Run the App
   /usr/bin/python3 /home/med/Documents/steven/high_level_3.py &

   # corrijo el error de mongod.lock borrando el archivo
   # /data/db/mongod.lock
   rm -f /data/db/mongod.lock

   # corro el server de base de datos
   /opt/mongo/bin/mongod --journal --fork --logpath /var/log/mongodb.log

   # corro webserver
   /usr/bin/python3 /home/med/Documents/steven/flask_app/app.py &
